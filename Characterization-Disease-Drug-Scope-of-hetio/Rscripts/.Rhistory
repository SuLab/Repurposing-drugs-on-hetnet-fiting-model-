network <- function( input=fname, filePth=pth, layout2 = "layout.fruchterman.reingold", selectValue = "val", title = "Comorbidity network Mental Depression (SimGIC)", cutOff = 0.1, propNode = 1, propEdge = 3., verbose = FALSE ) {
input <- read.delim(paste0(filePth, input), header=FALSE, colClasses = "character")
colnames(input) <- c("dis1", "dis2", "gD1", "gD2", "val")
input  <- input[input[[selectValue]] >= cutOff,]
edges <- data.frame( input[ , 1 ], input[ , 2 ] )
netw  <- igraph::graph.data.frame( edges, directed = FALSE )
netw  <- igraph::simplify( netw )
lay   <- igraph::layout.fruchterman.reingold( netw )
disPrev1 <- input[ , c( 1, 3 ) ]
colnames ( disPrev1 ) <- c( "dis", "gD" )
disPrev2 <- input[ , c( 2, 4 ) ]
colnames ( disPrev2 ) <- c( "dis", "gD" )
disPrev <- rbind ( disPrev1, disPrev2)
disPrev <- disPrev[ !duplicated( disPrev$dis ), ]
#disPrev$prevalence <- (as.numeric(disPrev$gD/sum(disPrev$gD))*100)
sizes <- as.numeric(disPrev[ , 2 ])
names( sizes ) <- disPrev[ , 1 ]
column <- which(colnames(input )==selectValue)
if( verbose ) {
message( "The network contains ", igraph::vcount( netw ), " nodes and ", igraph::ecount( netw ), " edges." )
}
codes <- unique(input$dis1)
input$gD1 <- as.numeric(input$gD1)
input$gD2 <- as.numeric(input$gD2)
input$val <- as.numeric(input$val)
plot( netw,
vertex.frame.color = "white",
layout              = lay,
vertex.color        = ifelse(igraph::V(netw)$name %in% codes, "pink", "lightblue"),
vertex.label.dist   = 0,      #puts the name labels slightly off the dots
vertex.frame.color  = 'blue', #the color of the border of the dots
vertex.label.color  = 'black',#the color of the name labels
vertex.label.font   = 0,      #the font of the name labels
vertex.label        = igraph::V( netw )$names, #specifies the lables of the vertices. in this case the 'name' attribute is used
edge.label          = round(input[,column], 3),
edge.color          = "darkgrey",
edge.width          =  input[,column] * propEdge,
edge.arrow.size     = 0.5,
vertex.size         = as.numeric( sizes[ igraph::V( netw )$name ] * propNode),
#vertex.size         = 0.5,
vertex.label.cex    = 0.8,    #specifies the size of the font of the labels
main                = title
)
}
input <- read.delim(paste0(filePth, input), header=FALSE, colClasses = "character")
input=fname
filePth=pth
input <- read.delim(paste0(filePth, input), header=FALSE, colClasses = "character")
head(input)
colnames(input) <- c("dis1", "dis2", "gD1", "gD2", "val")
head(input)
input  <- input[input[[selectValue]] >= cutOff,]
edges <- data.frame( input[ , 1 ], input[ , 2 ] )
netw  <- igraph::graph.data.frame( edges, directed = FALSE )
netw  <- igraph::simplify( netw )
lay   <- igraph::layout.fruchterman.reingold( netw )
disPrev1 <- input[ , c( 1, 3 ) ]
colnames ( disPrev1 ) <- c( "dis", "gD" )
disPrev2 <- input[ , c( 2, 4 ) ]
colnames ( disPrev2 ) <- c( "dis", "gD" )
disPrev <- rbind ( disPrev1, disPrev2)
disPrev <- disPrev[ !duplicated( disPrev$dis ), ]
#disPrev$prevalence <- (as.numeric(disPrev$gD/sum(disPrev$gD))*100)
sizes <- as.numeric(disPrev[ , 2 ])
names( sizes ) <- disPrev[ , 1 ]
column <- which(colnames(input )==selectValue)
if( verbose ) {
message( "The network contains ", igraph::vcount( netw ), " nodes and ", igraph::ecount( netw ), " edges." )
}
codes <- unique(input$dis1)
input$gD1 <- as.numeric(input$gD1)
input$gD2 <- as.numeric(input$gD2)
input$val <- as.numeric(input$val)
plot( netw,
vertex.frame.color = "white",
layout              = lay,
vertex.color        = ifelse(igraph::V(netw)$name %in% codes, "pink", "lightblue"),
vertex.label.dist   = 0,      #puts the name labels slightly off the dots
vertex.frame.color  = 'blue', #the color of the border of the dots
vertex.label.color  = 'black',#the color of the name labels
vertex.label.font   = 0,      #the font of the name labels
vertex.label        = igraph::V( netw )$names, #specifies the lables of the vertices. in this case the 'name' attribute is used
edge.label          = round(input[,column], 3),
edge.color          = "darkgrey",
edge.width          =  input[,column] * propEdge,
edge.arrow.size     = 0.5,
vertex.size         = as.numeric( sizes[ igraph::V( netw )$name ] * propNode),
#vertex.size         = 0.5,
vertex.label.cex    = 0.8,    #specifies the size of the font of the labels
main                = title
)
plot(netw)
head(codes)
plot( netw,
vertex.frame.color = "white",
layout              = lay,
vertex.color        = ifelse(igraph::V(netw)$name %in% codes, "pink", "lightblue"),
vertex.label.dist   = 0,      #puts the name labels slightly off the dots
vertex.frame.color  = 'blue', #the color of the border of the dots
vertex.label.color  = 'black',#the color of the name labels
vertex.label.font   = 0,      #the font of the name labels
vertex.label        = igraph::V( netw )$names, #specifies the lables of the vertices. in this case the 'name' attribute is used
edge.label          = round(input[,column], 3),
edge.color          = "darkgrey",
edge.width          =  input[,column] * propEdge,
edge.arrow.size     = 0.5,
vertex.size         = as.numeric( sizes[ igraph::V( netw )$name ] * propNode),
#vertex.size         = 0.5,
vertex.label.cex    = 0.8,    #specifies the size of the font of the labels
main                = title
)
plot( netw,
vertex.frame.color = "white",
layout              = lay
)
head(netw)
netw
pth <- "/home/nqueralt/Desktop/MedBioinformatics-phenotypic-diseasome-2015/data/diseasome-phenomeNET/"
fname <- "disname2disname2phenotypes-doid2name-diseasome-simgic-depression.txt"
input <- read.delim(paste0(filePth, input), header=FALSE, colClasses = "character")
input=fname
filePth=pth
input <- read.delim(paste0(filePth, input), header=FALSE, colClasses = "character")
head(input)
colnames(input) <- c("dis1", "dis2", "gD1", "gD2", "val")
input  <- input[input[[selectValue]] >= cutOff,]
head(input)
edges <- data.frame( input[ , 1 ], input[ , 2 ] )
netw  <- igraph::graph.data.frame( edges, directed = FALSE )
netw  <- igraph::simplify( netw )
lay   <- igraph::layout.fruchterman.reingold( netw )
disPrev1 <- input[ , c( 1, 3 ) ]
colnames ( disPrev1 ) <- c( "dis", "gD" )
disPrev2 <- input[ , c( 2, 4 ) ]
colnames ( disPrev2 ) <- c( "dis", "gD" )
disPrev <- rbind ( disPrev1, disPrev2)
head(disPrev)
disPrev <- disPrev[ !duplicated( disPrev$dis ), ]
head(disPrev)
sizes <- as.numeric(disPrev[ , 2 ])
names( sizes ) <- disPrev[ , 1 ]
column <- which(colnames(input )==selectValue)
column
message( "The network contains ", igraph::vcount( netw ), " nodes and ", igraph::ecount( netw ), " edges." )
codes <- unique(input$dis1)
head(input)
input$gD1 <- as.numeric(input$gD1)
input$gD2 <- as.numeric(input$gD2)
input$val <- as.numeric(input$val)
head(input)
plot( netw,
vertex.frame.color = "white",
layout              = lay,
vertex.color        = ifelse(igraph::V(netw)$name %in% codes, "pink", "lightblue"),
vertex.label.dist   = 0,      #puts the name labels slightly off the dots
vertex.frame.color  = 'blue', #the color of the border of the dots
vertex.label.color  = 'black',#the color of the name labels
vertex.label.font   = 0,      #the font of the name labels
vertex.label        = igraph::V( netw )$names, #specifies the lables of the vertices. in this case the 'name' attribute is used
edge.label          = round(input[,column], 3),
edge.color          = "darkgrey",
edge.width          =  input[,column] * propEdge,
edge.arrow.size     = 0.5,
vertex.size         = as.numeric( sizes[ igraph::V( netw )$name ] * propNode),
#vertex.size         = 0.5,
vertex.label.cex    = 0.8,    #specifies the size of the font of the labels
main                = title
)
igraph::V( netw )$names
V( netw )$names
edge.label          = round(input[,column], 3)
edge.label
edge.width          =  input[,column] * propEdge
plot( netw,
vertex.frame.color = "white",
layout              = lay,
vertex.color        = ifelse(igraph::V(netw)$name %in% codes, "pink", "lightblue"),
vertex.label.dist   = 0,      #puts the name labels slightly off the dots
vertex.frame.color  = 'blue', #the color of the border of the dots
vertex.label.color  = 'black',#the color of the name labels
vertex.label.font   = 0,      #the font of the name labels
#vertex.label        = igraph::V( netw )$names, #specifies the lables of the vertices. in this case the 'name' attribute is used
edge.label          = round(input[,column], 3),
edge.color          = "darkgrey",
edge.width          =  input[,column] * propEdge,
edge.arrow.size     = 0.5,
vertex.size         = as.numeric( sizes[ igraph::V( netw )$name ] * propNode),
#vertex.size         = 0.5,
vertex.label.cex    = 0.8,    #specifies the size of the font of the labels
main                = title
)
rm(list=ls())
gc()
pth <- "/home/nqueralt/Desktop/MedBioinformatics-phenotypic-diseasome-2015/data/diseasome-phenomeNET/"
fname <- "disname2disname2phenotypes-doid2name-diseasome-simgic-depression.txt"
network <- function( input=fname, filePth=pth, layout2 = "layout.fruchterman.reingold", selectValue = "val", title = "Comorbidity network Mental Depression (SimGIC)", cutOff = 0.1, propNode = 1, propEdge = 3., verbose = FALSE ) {
input <- read.delim(paste0(filePth, input), header=FALSE, colClasses = "character")
colnames(input) <- c("dis1", "dis2", "gD1", "gD2", "val")
input  <- input[input[[selectValue]] >= cutOff,]
edges <- data.frame( input[ , 1 ], input[ , 2 ] )
netw  <- igraph::graph.data.frame( edges, directed = FALSE )
netw  <- igraph::simplify( netw )
lay   <- igraph::layout.fruchterman.reingold( netw )
disPrev1 <- input[ , c( 1, 3 ) ]
colnames ( disPrev1 ) <- c( "dis", "gD" )
disPrev2 <- input[ , c( 2, 4 ) ]
colnames ( disPrev2 ) <- c( "dis", "gD" )
disPrev <- rbind ( disPrev1, disPrev2)
disPrev <- disPrev[ !duplicated( disPrev$dis ), ]
#disPrev$prevalence <- (as.numeric(disPrev$gD/sum(disPrev$gD))*100)
sizes <- as.numeric(disPrev[ , 2 ])
names( sizes ) <- disPrev[ , 1 ]
column <- which(colnames(input )==selectValue)
if( verbose ) {
message( "The network contains ", igraph::vcount( netw ), " nodes and ", igraph::ecount( netw ), " edges." )
}
codes <- unique(input$dis1)
input$gD1 <- as.numeric(input$gD1)
input$gD2 <- as.numeric(input$gD2)
input$val <- as.numeric(input$val)
plot( netw,
vertex.frame.color = "white",
layout              = lay,
vertex.color        = ifelse(igraph::V(netw)$name %in% codes, "pink", "lightblue"),
vertex.label.dist   = 0,      #puts the name labels slightly off the dots
vertex.frame.color  = 'blue', #the color of the border of the dots
vertex.label.color  = 'black',#the color of the name labels
vertex.label.font   = 0,      #the font of the name labels
#vertex.label        = igraph::V( netw )$names, #specifies the lables of the vertices. in this case the 'name' attribute is used
edge.label          = round(input[,column], 3),
edge.color          = "darkgrey",
edge.width          =  input[,column] * propEdge,
edge.arrow.size     = 0.5,
vertex.size         = as.numeric( sizes[ igraph::V( netw )$name ] * propNode),
#vertex.size         = 0.5,
vertex.label.cex    = 0.8,    #specifies the size of the font of the labels
main                = title
)
}
plot( netw,
vertex.frame.color = "white",
layout              = lay,
vertex.color        = ifelse(igraph::V(netw)$name %in% codes, "pink", "lightblue"),
vertex.label.dist   = 0,      #puts the name labels slightly off the dots
vertex.frame.color  = 'blue', #the color of the border of the dots
vertex.label.color  = 'black',#the color of the name labels
vertex.label.font   = 0,      #the font of the name labels
#vertex.label        = igraph::V( netw )$names, #specifies the lables of the vertices. in this case the 'name' attribute is used
edge.label          = round(input[,column], 3),
edge.color          = "darkgrey",
edge.width          =  input[,column] * propEdge,
edge.arrow.size     = 0.5,
vertex.size         = as.numeric( sizes[ igraph::V( netw )$name ] * propNode),
#vertex.size         = 0.5,
vertex.label.cex    = 0.8,    #specifies the size of the font of the labels
main                = title
)
input <- read.delim(paste0(filePth, input), header=FALSE, colClasses = "character")
colnames(input) <- c("dis1", "dis2", "gD1", "gD2", "val")
input  <- input[input[[selectValue]] >= cutOff,]
input=fname
filePth=pth
input <- read.delim(paste0(filePth, input), header=FALSE, colClasses = "character")
layout2 = "layout.fruchterman.reingold"
selectValue = "val"
title = "Comorbidity network Mental Depression (SimGIC)"
cutOff = 0.1
propNode = 1
propEdge = 3
verbose = FALSE
input <- read.delim(paste0(filePth, input), header=FALSE, colClasses = "character")
colnames(input) <- c("dis1", "dis2", "gD1", "gD2", "val")
input  <- input[input[[selectValue]] >= cutOff,]
edges <- data.frame( input[ , 1 ], input[ , 2 ] )
netw  <- igraph::graph.data.frame( edges, directed = FALSE )
netw  <- igraph::simplify( netw )
lay   <- igraph::layout.fruchterman.reingold( netw )
disPrev1 <- input[ , c( 1, 3 ) ]
colnames ( disPrev1 ) <- c( "dis", "gD" )
disPrev2 <- input[ , c( 2, 4 ) ]
colnames ( disPrev2 ) <- c( "dis", "gD" )
disPrev <- rbind ( disPrev1, disPrev2)
disPrev <- disPrev[ !duplicated( disPrev$dis ), ]
#disPrev$prevalence <- (as.numeric(disPrev$gD/sum(disPrev$gD))*100)
sizes <- as.numeric(disPrev[ , 2 ])
names( sizes ) <- disPrev[ , 1 ]
column <- which(colnames(input )==selectValue)
if( verbose ) {
message( "The network contains ", igraph::vcount( netw ), " nodes and ", igraph::ecount( netw ), " edges." )
}
codes <- unique(input$dis1)
input$gD1 <- as.numeric(input$gD1)
input$gD2 <- as.numeric(input$gD2)
input$val <- as.numeric(input$val)
plot( netw,
vertex.frame.color = "white",
layout              = lay,
vertex.color        = ifelse(igraph::V(netw)$name %in% codes, "pink", "lightblue"),
vertex.label.dist   = 0,      #puts the name labels slightly off the dots
vertex.frame.color  = 'blue', #the color of the border of the dots
vertex.label.color  = 'black',#the color of the name labels
vertex.label.font   = 0,      #the font of the name labels
#vertex.label        = igraph::V( netw )$names, #specifies the lables of the vertices. in this case the 'name' attribute is used
edge.label          = round(input[,column], 3),
edge.color          = "darkgrey",
edge.width          =  input[,column] * propEdge,
edge.arrow.size     = 0.5,
vertex.size         = as.numeric( sizes[ igraph::V( netw )$name ] * propNode),
#vertex.size         = 0.5,
vertex.label.cex    = 0.8,    #specifies the size of the font of the labels
main                = title
)
plot(netw)
pth <- "/home/nqueralt/Desktop/MedBioinformatics-phenotypic-diseasome-2015/data/diseasome-phenomeNET/"
#fname <- "disname2disname2phenotypes-doid2name-diseasome-simgic-depression.txt"
fname <- "doid2name2phenotypes-doid2name-diseasome-resnik-alzheimer-obsolete-mod_ag.txt"
#network(input=fname, filePth = pth, layout2 = "layout.fruchterman.reingold", selectValue = "val", title = "Comorbidity network", cutOff, prop  = 0.5, verbose = FALSE )
network <- function( input=fname, filePth=pth, layout2 = "layout.fruchterman.reingold", selectValue = "val", title = "Comorbidity network Alzheimer Disease (Resnik)", cutOff = 0.1, propNode = 1, propEdge = 3, verbose = FALSE ) {
input <- read.delim(paste0(filePth, input), header=FALSE, colClasses = "character")
colnames(input) <- c("dis1", "dis2", "gD1", "gD2", "val")
input  <- input[input[[selectValue]] >= cutOff,]
edges <- data.frame( input[ , 1 ], input[ , 2 ] )
netw  <- igraph::graph.data.frame( edges, directed = FALSE )
netw  <- igraph::simplify( netw )
lay   <- igraph::layout.fruchterman.reingold( netw )
disPrev1 <- input[ , c( 1, 3 ) ]
colnames ( disPrev1 ) <- c( "dis", "gD" )
disPrev2 <- input[ , c( 2, 4 ) ]
colnames ( disPrev2 ) <- c( "dis", "gD" )
disPrev <- rbind ( disPrev1, disPrev2)
disPrev <- disPrev[ !duplicated( disPrev$dis ), ]
#disPrev$prevalence <- (as.numeric(disPrev$gD/sum(disPrev$gD))*100)
sizes <- as.numeric(disPrev[ , 2 ])
names( sizes ) <- disPrev[ , 1 ]
column <- which(colnames(input )==selectValue)
if( verbose ) {
message( "The network contains ", igraph::vcount( netw ), " nodes and ", igraph::ecount( netw ), " edges." )
}
codes <- unique(input$dis1)
input$gD1 <- as.numeric(input$gD1)
input$gD2 <- as.numeric(input$gD2)
input$val <- as.numeric(input$val)
plot( netw,
vertex.frame.color = "white",
layout              = lay,
vertex.color        = ifelse(igraph::V(netw)$name %in% codes, "pink", "lightblue"),
vertex.label.dist   = 0,      #puts the name labels slightly off the dots
vertex.frame.color  = 'blue', #the color of the border of the dots
vertex.label.color  = 'black',#the color of the name labels
vertex.label.font   = 0,      #the font of the name labels
#vertex.label        = igraph::V( netw )$names, #specifies the lables of the vertices. in this case the 'name' attribute is used
edge.label          = round(input[,column], 3),
edge.color          = "darkgrey",
edge.width          =  input[,column] * propEdge,
edge.arrow.size     = 0.5,
vertex.size         = as.numeric( sizes[ igraph::V( netw )$name ] * propNode),
#vertex.size         = 0.5,
vertex.label.cex    = 0.8,    #specifies the size of the font of the labels
main                = title
)
}
pth <- "/home/nqueralt/Desktop/MedBioinformatics-phenotypic-diseasome-2015/data/diseasome-phenomeNET/"
#fname <- "disname2disname2phenotypes-doid2name-diseasome-simgic-depression.txt"
fname <- "doid2name2phenotypes-doid2name-diseasome-resnik-alzheimer-obsolete-mod_ag.txt"
network(input=fname, filePth = pth, layout2 = "layout.fruchterman.reingold", selectValue = "val", title = "Comorbidity network", cutOff = 0.1, propNode  = 1, propEdge = 3,  verbose = FALSE )
network <- function( input=fname, filePth=pth, layout2 = "layout.fruchterman.reingold", selectValue = "val", title = "Comorbidity network Mental Depression (SimGIC)", cutOff = 0.1, propNode = 1, propEdge = 3, verbose = FALSE ) {
input <- read.delim(paste0(filePth, input), header=FALSE, colClasses = "character")
colnames(input) <- c("dis1", "dis2", "gD1", "gD2", "val")
input  <- input[input[[selectValue]] >= cutOff,]
edges <- data.frame( input[ , 1 ], input[ , 2 ] )
netw  <- igraph::graph.data.frame( edges, directed = FALSE )
netw  <- igraph::simplify( netw )
lay   <- igraph::layout.fruchterman.reingold( netw )
disPrev1 <- input[ , c( 1, 3 ) ]
colnames ( disPrev1 ) <- c( "dis", "gD" )
disPrev2 <- input[ , c( 2, 4 ) ]
colnames ( disPrev2 ) <- c( "dis", "gD" )
disPrev <- rbind ( disPrev1, disPrev2)
disPrev <- disPrev[ !duplicated( disPrev$dis ), ]
#disPrev$prevalence <- (as.numeric(disPrev$gD/sum(disPrev$gD))*100)
sizes <- as.numeric(disPrev[ , 2 ])
names( sizes ) <- disPrev[ , 1 ]
column <- which(colnames(input )==selectValue)
if( verbose ) {
message( "The network contains ", igraph::vcount( netw ), " nodes and ", igraph::ecount( netw ), " edges." )
}
codes <- unique(input$dis1)
input$gD1 <- as.numeric(input$gD1)
input$gD2 <- as.numeric(input$gD2)
input$val <- as.numeric(input$val)
p <- plot( netw,
vertex.frame.color = "white",
layout              = lay,
vertex.color        = ifelse(igraph::V(netw)$name %in% codes, "pink", "lightblue"),
vertex.label.dist   = 0,      #puts the name labels slightly off the dots
vertex.frame.color  = 'blue', #the color of the border of the dots
vertex.label.color  = 'black',#the color of the name labels
vertex.label.font   = 0,      #the font of the name labels
vertex.label        = igraph::V( netw )$names, #specifies the lables of the vertices. in this case the 'name' attribute is used
edge.label          = round(input[,column], 3),
edge.color          = "darkgrey",
edge.width          =  input[,column] * propEdge,
edge.arrow.size     = 0.5,
vertex.size         = as.numeric( sizes[ igraph::V( netw )$name ] * propNode),
#vertex.size         = 0.5,
vertex.label.cex    = 0.8,    #specifies the size of the font of the labels
main                = title
)
p
}
rm(list = ls())
library("igraph")
install.packages('igraph')
install.packages("igraph")
rm(list = ls())
library("igraph")
#fileontology <- read.csv("/home/nqueralt/Desktop/MedBioinformatics-phenotypic-diseasome-2015/data/out/do_ontologyChildParent.tab", sep = "\t", header = F, colClasses="character")
fileontology <- read.csv("/home/nuria/workspace/repurposing-hetio/rephetio-dhimmelstein/Characterization-Disease-Drug-Scope-of-hetio/out/do_ontologyChildParent.tab", sep = "\t", header = F)
edges <- fileontology[c(1,2)]
nodes<- as.data.frame(unique(c(unique(as.character(edges[, 1])), unique(as.character(edges[,2])))))
dim(nodes)
graph.full = graph.data.frame(edges, directed=T, vertices=nodes)
vcount(graph.full) # number of nodes
ecount(graph.full) # number of edges
graph <- igraph::simplify(graph.full)
vcount(graph)
ecount(graph)
resultsPathways  <- data.frame(t(rep(NA,3)))
colnames(resultsPathways ) <- c("child", "parent", "length")
#fileparent <- read.csv("/home/nqueralt/Desktop/MedBioinformatics-phenotypic-diseasome-2015/data/out/do_ontology1rstBranchParents.tab", sep = "\t", header = F, colClasses="character")
fileparent <- read.csv("/home/nuria/workspace/repurposing-hetio/rephetio-dhimmelstein/Characterization-Disease-Drug-Scope-of-hetio/out/do_ontology1rstBranchParents.tab", sep = "\t", header = F)
parent <- fileparent[c(1)]
#filechild <- read.csv("/home/nqueralt/Desktop/MedBioinformatics-phenotypic-diseasome-2015/data/out/allMergedDiseases.tab", sep = "\t", header = F, colClasses="character")
#filechild <- read.csv("/home/nqueralt/Desktop/MedBioinformatics-phenotypic-diseasome-2015/data/out/allMergedDiseases.tab", sep = "\t", header = F)
filechild <- read.csv("/home/nuria/workspace/repurposing-hetio/rephetio-dhimmelstein/Characterization-Disease-Drug-Scope-of-hetio/out/hetionet-doids-list.tab", sep = "\t", header = F)
child <- filechild[c(1)]
child <- child$V1
parent <- parent$V1
length(unique(child))
colnames(nodes) <- "node"
child <- intersect(child,nodes$node)
length(unique(child))
c <- 1
for (nodo1 in child ){
for (nodo2 in parent){
sp <- get.shortest.paths(graph,from = nodo1, to = nodo2, mode = "out")
if (length(sp$vpath[[1]]) > 0){
l <- length(sp$vpath[[1]])
#parent <-labels( graph[[sp[[1]][length(sp[[1]])]]])
resultsPathways[c, 1] <- nodo1
resultsPathways[c, 2] <- nodo2
#resultsPathways[c, 3] <- l-1 # count of edges
resultsPathways[c, 3] <- l # original row
#       camino <- sp$vpath[[1]]
#       caminolabels <-labels( graph[[camino]])
#       caminolabels[l]
#       paste(caminolabels, collapse = ", ")
c<- c+1
}
}
}
resultsPathways
write.csv(resultsPathways,"/home/nuria/workspace/repurposing-hetio/rephetio-dhimmelstein/Characterization-Disease-Drug-Scope-of-hetio/out/hetionet-doidsPathways.csv")
str(resultsPathways)
length(unique(parent))
length(unique(child))
doClass.freq = table(sort(resultsPathways$parent))
sum(doClass.freq) # 5546
doClassPercent.freq = prop.table(doClass.freq)*100
doClassPercentSort.freq = sort(doClassPercent.freq,decreasing = T)
#sortnames <- c("Disease of anatomical entity","Disease of cellular proliferation","Disease by infectious agent","Disease of metabolism","Genetic disease","Disease of mental health","Syndrome","Physical disorder")
sortnames <- c(fileparent[c(2)])
names(doClassPercentSort.freq) <- sortnames$V2
library(Cairo)
install.package('Cairo')
install.packages('Cairo')
png("/home/nuria/workspace/repurposing-hetio/rephetio-dhimmelstein/Characterization-Disease-Drug-Scope-of-hetio/out/hetionet-doids-classes-percent.png",width=1700,height=960, units = "px", pointsize = 18)
par(oma=c(.2,8.,.2,.2))
barplot(doClassPercentSort.freq,las=2,cex.names=.8,xlim=c(0,100),main="DO Classes",xlab="% of diseases",cex.axis=.8,horiz=T)
text(doClassPercentSort.freq+2,f1bp,labels=paste0(as.character(round(doClassPercentSort.freq)),"%"),cex=.7,xpd=T)
f1bp <- barplot(doClassPercentSort.freq,las=2,cex.names=.8,xlim=c(0,100),main="DO Classes",xlab="% of diseases",cex.axis=.8,horiz=T)
text(doClassPercentSort.freq+2,f1bp,labels=paste0(as.character(round(doClassPercentSort.freq)),"%"),cex=.7,xpd=T)
dev.off()
par(oma=c(.2,8.,.2,.2))
barplot(doClassPercentSort.freq,las=2,cex.names=.8,xlim=c(0,100),main="DO Classes",xlab="% of diseases",cex.axis=.8,horiz=T)
text(doClassPercentSort.freq+2,f1bp,labels=paste0(as.character(round(doClassPercentSort.freq)),"%"),cex=.7,xpd=T)
f1bp <- barplot(doClassPercentSort.freq,las=2,cex.names=.8,xlim=c(0,100),main="DO Classes",xlab="% of diseases",cex.axis=.8,horiz=T)
str(resultsPathways)
length(unique(parent))
length(unique(child))
doClass.freq = table(sort(resultsPathways$parent))
sum(doClass.freq) # 136
summary(doClass.freq)
head(doClass.freq)
sortnames
doClass.freq
?table
doClass.freq
?prop.table
doClassPercent.freq
?merge
sortnames
str(sortnames)
sortnames$V1
sortnames$V2
c(fileparent[c(1)])
c(fileparent[c(1,2)])
doClassPercentSort.freq
str(doClassPercentSort.freq)
class(doClassPercentSort.freq)
data.frame(doClassPercentSort.freq)
table(data.frame(doClassPercentSort.freq))
